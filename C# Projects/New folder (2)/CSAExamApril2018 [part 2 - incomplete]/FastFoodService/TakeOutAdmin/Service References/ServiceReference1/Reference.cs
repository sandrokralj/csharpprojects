//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TakeOutAdmin.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int orderNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int orderNumber {
            get {
                return this.orderNumberField;
            }
            set {
                if ((this.orderNumberField.Equals(value) != true)) {
                    this.orderNumberField = value;
                    this.RaisePropertyChanged("orderNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(TakeOutAdmin.ServiceReference1.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrderNumber", ReplyAction="http://tempuri.org/IService1/GetOrderNumberResponse")]
        int GetOrderNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrderNumber", ReplyAction="http://tempuri.org/IService1/GetOrderNumberResponse")]
        System.Threading.Tasks.Task<int> GetOrderNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProducts", ReplyAction="http://tempuri.org/IService1/GetProductsResponse")]
        TakeOutAdmin.ServiceReference1.Product[] GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProducts", ReplyAction="http://tempuri.org/IService1/GetProductsResponse")]
        System.Threading.Tasks.Task<TakeOutAdmin.ServiceReference1.Product[]> GetProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MakeOrder", ReplyAction="http://tempuri.org/IService1/MakeOrderResponse")]
        string MakeOrder(int orderNumber, string[] selectedProducts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MakeOrder", ReplyAction="http://tempuri.org/IService1/MakeOrderResponse")]
        System.Threading.Tasks.Task<string> MakeOrderAsync(int orderNumber, string[] selectedProducts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/OrderStatus")]
        void OrderStatus(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TakeOutAdmin.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<TakeOutAdmin.ServiceReference1.IService1>, TakeOutAdmin.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int GetOrderNumber() {
            return base.Channel.GetOrderNumber();
        }
        
        public System.Threading.Tasks.Task<int> GetOrderNumberAsync() {
            return base.Channel.GetOrderNumberAsync();
        }
        
        public TakeOutAdmin.ServiceReference1.Product[] GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public System.Threading.Tasks.Task<TakeOutAdmin.ServiceReference1.Product[]> GetProductsAsync() {
            return base.Channel.GetProductsAsync();
        }
        
        public string MakeOrder(int orderNumber, string[] selectedProducts) {
            return base.Channel.MakeOrder(orderNumber, selectedProducts);
        }
        
        public System.Threading.Tasks.Task<string> MakeOrderAsync(int orderNumber, string[] selectedProducts) {
            return base.Channel.MakeOrderAsync(orderNumber, selectedProducts);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService2")]
    public interface IService2 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetOrderNumbers", ReplyAction="http://tempuri.org/IService2/GetOrderNumbersResponse")]
        TakeOutAdmin.ServiceReference1.Order[] GetOrderNumbers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetOrderNumbers", ReplyAction="http://tempuri.org/IService2/GetOrderNumbersResponse")]
        System.Threading.Tasks.Task<TakeOutAdmin.ServiceReference1.Order[]> GetOrderNumbersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/DeliverOrder", ReplyAction="http://tempuri.org/IService2/DeliverOrderResponse")]
        bool DeliverOrder(int orderNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/DeliverOrder", ReplyAction="http://tempuri.org/IService2/DeliverOrderResponse")]
        System.Threading.Tasks.Task<bool> DeliverOrderAsync(int orderNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService2Channel : TakeOutAdmin.ServiceReference1.IService2, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service2Client : System.ServiceModel.ClientBase<TakeOutAdmin.ServiceReference1.IService2>, TakeOutAdmin.ServiceReference1.IService2 {
        
        public Service2Client() {
        }
        
        public Service2Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service2Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TakeOutAdmin.ServiceReference1.Order[] GetOrderNumbers() {
            return base.Channel.GetOrderNumbers();
        }
        
        public System.Threading.Tasks.Task<TakeOutAdmin.ServiceReference1.Order[]> GetOrderNumbersAsync() {
            return base.Channel.GetOrderNumbersAsync();
        }
        
        public bool DeliverOrder(int orderNumber) {
            return base.Channel.DeliverOrder(orderNumber);
        }
        
        public System.Threading.Tasks.Task<bool> DeliverOrderAsync(int orderNumber) {
            return base.Channel.DeliverOrderAsync(orderNumber);
        }
    }
}
