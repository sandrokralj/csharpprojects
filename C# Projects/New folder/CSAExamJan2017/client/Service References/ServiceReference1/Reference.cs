//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="House", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class House : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AskingPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AskingPrice {
            get {
                return this.AskingPriceField;
            }
            set {
                if ((this.AskingPriceField.Equals(value) != true)) {
                    this.AskingPriceField = value;
                    this.RaisePropertyChanged("AskingPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(RentClient.ServiceReference1.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAskingPrice", ReplyAction="http://tempuri.org/IService1/GetAskingPriceResponse")]
        int GetAskingPrice(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAskingPrice", ReplyAction="http://tempuri.org/IService1/GetAskingPriceResponse")]
        System.Threading.Tasks.Task<int> GetAskingPriceAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAvailableHouses", ReplyAction="http://tempuri.org/IService1/GetAvailableHousesResponse")]
        RentClient.ServiceReference1.House[] GetAvailableHouses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAvailableHouses", ReplyAction="http://tempuri.org/IService1/GetAvailableHousesResponse")]
        System.Threading.Tasks.Task<RentClient.ServiceReference1.House[]> GetAvailableHousesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MakeOffer", ReplyAction="http://tempuri.org/IService1/MakeOfferResponse")]
        bool MakeOffer(string address, int offerPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MakeOffer", ReplyAction="http://tempuri.org/IService1/MakeOfferResponse")]
        System.Threading.Tasks.Task<bool> MakeOfferAsync(string address, int offerPrice);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/Subscribe")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/Unubscribe")]
        void Unubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/Unubscribe")]
        System.Threading.Tasks.Task UnubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/HouseNotAvailable")]
        void HouseNotAvailable(RentClient.ServiceReference1.House house);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : RentClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<RentClient.ServiceReference1.IService1>, RentClient.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int GetAskingPrice(string address) {
            return base.Channel.GetAskingPrice(address);
        }
        
        public System.Threading.Tasks.Task<int> GetAskingPriceAsync(string address) {
            return base.Channel.GetAskingPriceAsync(address);
        }
        
        public RentClient.ServiceReference1.House[] GetAvailableHouses() {
            return base.Channel.GetAvailableHouses();
        }
        
        public System.Threading.Tasks.Task<RentClient.ServiceReference1.House[]> GetAvailableHousesAsync() {
            return base.Channel.GetAvailableHousesAsync();
        }
        
        public bool MakeOffer(string address, int offerPrice) {
            return base.Channel.MakeOffer(address, offerPrice);
        }
        
        public System.Threading.Tasks.Task<bool> MakeOfferAsync(string address, int offerPrice) {
            return base.Channel.MakeOfferAsync(address, offerPrice);
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unubscribe() {
            base.Channel.Unubscribe();
        }
        
        public System.Threading.Tasks.Task UnubscribeAsync() {
            return base.Channel.UnubscribeAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService2")]
    public interface IService2 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetOffers", ReplyAction="http://tempuri.org/IService2/GetOffersResponse")]
        string[] GetOffers(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/GetOffers", ReplyAction="http://tempuri.org/IService2/GetOffersResponse")]
        System.Threading.Tasks.Task<string[]> GetOffersAsync(string address);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService2Channel : RentClient.ServiceReference1.IService2, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service2Client : System.ServiceModel.ClientBase<RentClient.ServiceReference1.IService2>, RentClient.ServiceReference1.IService2 {
        
        public Service2Client() {
        }
        
        public Service2Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service2Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetOffers(string address) {
            return base.Channel.GetOffers(address);
        }
        
        public System.Threading.Tasks.Task<string[]> GetOffersAsync(string address) {
            return base.Channel.GetOffersAsync(address);
        }
    }
}
